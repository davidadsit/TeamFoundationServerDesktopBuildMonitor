//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
// 

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

#pragma warning disable 1591

namespace CCTfsWrapper
{
	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[WebServiceBinding(Name = "BuildStoreSoap",
		Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class BuildStore : SoapHttpClientProtocol
	{
		private SendOrPostCallback AddBuildOperationCompleted;
		private SendOrPostCallback AddBuildStepOperationCompleted;
		private SendOrPostCallback AddChangeSetsForBuildOperationCompleted;

		private SendOrPostCallback AddOpenedWorkItemsForBuildOperationCompleted;
		private SendOrPostCallback AddPlatformFlavorLogForBuildOperationCompleted;
		private SendOrPostCallback AddProjectDetailsForBuildOperationCompleted;
		private SendOrPostCallback AddWorkItemsForBuildOperationCompleted;
		private SendOrPostCallback GetBuildDetailsOperationCompleted;

		private SendOrPostCallback GetBuildQualitiesOperationCompleted;
		private SendOrPostCallback GetBuildStepsOperationCompleted;
		private SendOrPostCallback GetBuildUriOperationCompleted;

		private SendOrPostCallback GetChangeSetsForBuildOperationCompleted;

		private SendOrPostCallback GetCodeCoverageForBuildOperationCompleted;

		private SendOrPostCallback GetCodeCoverageStatusForBuildOperationCompleted;
		private SendOrPostCallback GetCompilationSummaryForBuildOperationCompleted;
		private SendOrPostCallback GetListOfBuildsOperationCompleted;
		private SendOrPostCallback GetOpenedWorkItemsForBuildOperationCompleted;
		private SendOrPostCallback GetPlatformFlavorsForBuildOperationCompleted;
		private SendOrPostCallback GetTestResultsForBuildOperationCompleted;
		private SendOrPostCallback GetWorkItemsForBuildOperationCompleted;
		private SendOrPostCallback UpdateBuildFinishTimeOperationCompleted;

		private SendOrPostCallback UpdateBuildFlagOperationCompleted;

		private SendOrPostCallback UpdateBuildLogLocationOperationCompleted;
		private SendOrPostCallback UpdateBuildNumberAndDropLocationOperationCompleted;
		private SendOrPostCallback UpdateBuildQualityOperationCompleted;

		private SendOrPostCallback UpdateBuildStatusOperationCompleted;

		private SendOrPostCallback UpdateBuildStepOperationCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/AddBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public string AddBuild(string teamProject, BuildData buildData)
		{
			object[] results = Invoke("AddBuild", new object[] {teamProject, buildData});
			return ((string) (results[0]));
		}

		/// <remarks/>
		public void AddBuildAsync(string teamProject, BuildData buildData)
		{
			AddBuildAsync(teamProject, buildData, null);
		}

		/// <remarks/>
		public void AddBuildAsync(string teamProject, BuildData buildData, object userState)
		{
			if ((AddBuildOperationCompleted == null))
			{
				AddBuildOperationCompleted = new SendOrPostCallback(OnAddBuildOperationCompleted);
			}
			InvokeAsync("AddBuild", new object[] {teamProject, buildData}, AddBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event AddBuildCompletedEventHandler AddBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/AddBuildSt" + "ep",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void AddBuildStep(string buildUri, string buildStepName, string stepMessage)
		{
			Invoke("AddBuildStep", new object[] {buildUri, buildStepName, stepMessage});
		}

		/// <remarks/>
		public void AddBuildStepAsync(string buildUri, string buildStepName, string stepMessage)
		{
			AddBuildStepAsync(buildUri, buildStepName, stepMessage, null);
		}

		/// <remarks/>
		public void AddBuildStepAsync(string buildUri, string buildStepName, string stepMessage, object userState)
		{
			if ((AddBuildStepOperationCompleted == null))
			{
				AddBuildStepOperationCompleted = new SendOrPostCallback(OnAddBuildStepOperationCompleted);
			}
			InvokeAsync("AddBuildStep", new object[] {buildUri, buildStepName, stepMessage}, AddBuildStepOperationCompleted,
			            userState);
		}

		/// <remarks/>
		public event AddBuildStepCompletedEventHandler AddBuildStepCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/AddChangeS" + "etsForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void AddChangeSetsForBuild(string buildUri, ChangeSetData[] changesets)
		{
			Invoke("AddChangeSetsForBuild", new object[] {buildUri, changesets});
		}

		/// <remarks/>
		public void AddChangeSetsForBuildAsync(string buildUri, ChangeSetData[] changesets)
		{
			AddChangeSetsForBuildAsync(buildUri, changesets, null);
		}

		/// <remarks/>
		public void AddChangeSetsForBuildAsync(string buildUri, ChangeSetData[] changesets, object userState)
		{
			if ((AddChangeSetsForBuildOperationCompleted == null))
			{
				AddChangeSetsForBuildOperationCompleted = new SendOrPostCallback(OnAddChangeSetsForBuildOperationCompleted);
			}
			InvokeAsync("AddChangeSetsForBuild", new object[] {buildUri, changesets}, AddChangeSetsForBuildOperationCompleted,
			            userState);
		}

		/// <remarks/>
		public event AddChangeSetsForBuildCompletedEventHandler AddChangeSetsForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/AddOpenedW" + "orkItemsForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void AddOpenedWorkItemsForBuild(string buildUri, WorkItemData[] workItems)
		{
			Invoke("AddOpenedWorkItemsForBuild", new object[] {buildUri, workItems});
		}

		/// <remarks/>
		public void AddOpenedWorkItemsForBuildAsync(string buildUri, WorkItemData[] workItems)
		{
			AddOpenedWorkItemsForBuildAsync(buildUri, workItems, null);
		}

		/// <remarks/>
		public void AddOpenedWorkItemsForBuildAsync(string buildUri, WorkItemData[] workItems, object userState)
		{
			if ((AddOpenedWorkItemsForBuildOperationCompleted == null))
			{
				AddOpenedWorkItemsForBuildOperationCompleted = new SendOrPostCallback(OnAddOpenedWorkItemsForBuildOperationCompleted);
			}
			InvokeAsync("AddOpenedWorkItemsForBuild", new object[] {buildUri, workItems},
			            AddOpenedWorkItemsForBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event AddOpenedWorkItemsForBuildCompletedEventHandler AddOpenedWorkItemsForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/AddPlatfor" + "mFlavorLogForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void AddPlatformFlavorLogForBuild(string buildUri, string platform, string flavor, string logFileName)
		{
			Invoke("AddPlatformFlavorLogForBuild", new object[] {buildUri, platform, flavor, logFileName});
		}

		/// <remarks/>
		public void AddPlatformFlavorLogForBuildAsync(string buildUri, string platform, string flavor, string logFileName)
		{
			AddPlatformFlavorLogForBuildAsync(buildUri, platform, flavor, logFileName, null);
		}

		/// <remarks/>
		public void AddPlatformFlavorLogForBuildAsync(string buildUri, string platform, string flavor, string logFileName,
		                                              object userState)
		{
			if ((AddPlatformFlavorLogForBuildOperationCompleted == null))
			{
				AddPlatformFlavorLogForBuildOperationCompleted =
					new SendOrPostCallback(OnAddPlatformFlavorLogForBuildOperationCompleted);
			}
			InvokeAsync("AddPlatformFlavorLogForBuild", new object[] {buildUri, platform, flavor, logFileName},
			            AddPlatformFlavorLogForBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event AddPlatformFlavorLogForBuildCompletedEventHandler AddPlatformFlavorLogForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/AddProject" + "DetailsForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void AddProjectDetailsForBuild(string buildUri, ProjectData project)
		{
			Invoke("AddProjectDetailsForBuild", new object[] {buildUri, project});
		}

		/// <remarks/>
		public void AddProjectDetailsForBuildAsync(string buildUri, ProjectData project)
		{
			AddProjectDetailsForBuildAsync(buildUri, project, null);
		}

		/// <remarks/>
		public void AddProjectDetailsForBuildAsync(string buildUri, ProjectData project, object userState)
		{
			if ((AddProjectDetailsForBuildOperationCompleted == null))
			{
				AddProjectDetailsForBuildOperationCompleted = new SendOrPostCallback(OnAddProjectDetailsForBuildOperationCompleted);
			}
			InvokeAsync("AddProjectDetailsForBuild", new object[] {buildUri, project},
			            AddProjectDetailsForBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event AddProjectDetailsForBuildCompletedEventHandler AddProjectDetailsForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/AddWorkIte" + "msForBuild"
			, RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void AddWorkItemsForBuild(string buildUri, WorkItemData[] workItems)
		{
			Invoke("AddWorkItemsForBuild", new object[] {buildUri, workItems});
		}

		/// <remarks/>
		public void AddWorkItemsForBuildAsync(string buildUri, WorkItemData[] workItems)
		{
			AddWorkItemsForBuildAsync(buildUri, workItems, null);
		}

		/// <remarks/>
		public void AddWorkItemsForBuildAsync(string buildUri, WorkItemData[] workItems, object userState)
		{
			if ((AddWorkItemsForBuildOperationCompleted == null))
			{
				AddWorkItemsForBuildOperationCompleted = new SendOrPostCallback(OnAddWorkItemsForBuildOperationCompleted);
			}
			InvokeAsync("AddWorkItemsForBuild", new object[] {buildUri, workItems}, AddWorkItemsForBuildOperationCompleted,
			            userState);
		}

		/// <remarks/>
		public event AddWorkItemsForBuildCompletedEventHandler AddWorkItemsForBuildCompleted;

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetBuildDe" + "tails",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public BuildData GetBuildDetails(string buildUri)
		{
			object[] results = Invoke("GetBuildDetails", new object[] {buildUri});
			return ((BuildData) (results[0]));
		}

		/// <remarks/>
		public void GetBuildDetailsAsync(string buildUri)
		{
			GetBuildDetailsAsync(buildUri, null);
		}

		/// <remarks/>
		public void GetBuildDetailsAsync(string buildUri, object userState)
		{
			if ((GetBuildDetailsOperationCompleted == null))
			{
				GetBuildDetailsOperationCompleted = new SendOrPostCallback(OnGetBuildDetailsOperationCompleted);
			}
			InvokeAsync("GetBuildDetails", new object[] {buildUri}, GetBuildDetailsOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetBuildDetailsCompletedEventHandler GetBuildDetailsCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetBuildQu" + "alities",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public string[] GetBuildQualities()
		{
			object[] results = Invoke("GetBuildQualities", new object[0]);
			return ((string[]) (results[0]));
		}

		/// <remarks/>
		public void GetBuildQualitiesAsync()
		{
			GetBuildQualitiesAsync(null);
		}

		/// <remarks/>
		public void GetBuildQualitiesAsync(object userState)
		{
			if ((GetBuildQualitiesOperationCompleted == null))
			{
				GetBuildQualitiesOperationCompleted = new SendOrPostCallback(OnGetBuildQualitiesOperationCompleted);
			}
			InvokeAsync("GetBuildQualities", new object[0], GetBuildQualitiesOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetBuildQualitiesCompletedEventHandler GetBuildQualitiesCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetBuildSt" + "eps",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public BuildStepData[] GetBuildSteps(string buildUri)
		{
			object[] results = Invoke("GetBuildSteps", new object[] {buildUri});
			return ((BuildStepData[]) (results[0]));
		}

		/// <remarks/>
		public void GetBuildStepsAsync(string buildUri)
		{
			GetBuildStepsAsync(buildUri, null);
		}

		/// <remarks/>
		public void GetBuildStepsAsync(string buildUri, object userState)
		{
			if ((GetBuildStepsOperationCompleted == null))
			{
				GetBuildStepsOperationCompleted = new SendOrPostCallback(OnGetBuildStepsOperationCompleted);
			}
			InvokeAsync("GetBuildSteps", new object[] {buildUri}, GetBuildStepsOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetBuildStepsCompletedEventHandler GetBuildStepsCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetBuildUr" + "i",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public string GetBuildUri(string teamProject, string buildNumber)
		{
			object[] results = Invoke("GetBuildUri", new object[] {teamProject, buildNumber});
			return ((string) (results[0]));
		}

		/// <remarks/>
		public void GetBuildUriAsync(string teamProject, string buildNumber)
		{
			GetBuildUriAsync(teamProject, buildNumber, null);
		}

		/// <remarks/>
		public void GetBuildUriAsync(string teamProject, string buildNumber, object userState)
		{
			if ((GetBuildUriOperationCompleted == null))
			{
				GetBuildUriOperationCompleted = new SendOrPostCallback(OnGetBuildUriOperationCompleted);
			}
			InvokeAsync("GetBuildUri", new object[] {teamProject, buildNumber}, GetBuildUriOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetBuildUriCompletedEventHandler GetBuildUriCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetChangeS" + "etsForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public ChangeSetData[] GetChangeSetsForBuild(string buildUri)
		{
			object[] results = Invoke("GetChangeSetsForBuild", new object[] {buildUri});
			return ((ChangeSetData[]) (results[0]));
		}

		/// <remarks/>
		public void GetChangeSetsForBuildAsync(string buildUri)
		{
			GetChangeSetsForBuildAsync(buildUri, null);
		}

		/// <remarks/>
		public void GetChangeSetsForBuildAsync(string buildUri, object userState)
		{
			if ((GetChangeSetsForBuildOperationCompleted == null))
			{
				GetChangeSetsForBuildOperationCompleted = new SendOrPostCallback(OnGetChangeSetsForBuildOperationCompleted);
			}
			InvokeAsync("GetChangeSetsForBuild", new object[] {buildUri}, GetChangeSetsForBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetChangeSetsForBuildCompletedEventHandler GetChangeSetsForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetCodeCov" + "erageForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public CodeCoverageData[] GetCodeCoverageForBuild(string buildUri, string platform, string flavor)
		{
			object[] results = Invoke("GetCodeCoverageForBuild", new object[] {buildUri, platform, flavor});
			return ((CodeCoverageData[]) (results[0]));
		}

		/// <remarks/>
		public void GetCodeCoverageForBuildAsync(string buildUri, string platform, string flavor)
		{
			GetCodeCoverageForBuildAsync(buildUri, platform, flavor, null);
		}

		/// <remarks/>
		public void GetCodeCoverageForBuildAsync(string buildUri, string platform, string flavor, object userState)
		{
			if ((GetCodeCoverageForBuildOperationCompleted == null))
			{
				GetCodeCoverageForBuildOperationCompleted = new SendOrPostCallback(OnGetCodeCoverageForBuildOperationCompleted);
			}
			InvokeAsync("GetCodeCoverageForBuild", new object[] {buildUri, platform, flavor},
			            GetCodeCoverageForBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetCodeCoverageForBuildCompletedEventHandler GetCodeCoverageForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetCodeCov" + "erageStatusForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public CodeCoverageStatus GetCodeCoverageStatusForBuild(string buildUri, string platform, string flavor)
		{
			object[] results = Invoke("GetCodeCoverageStatusForBuild", new object[] {buildUri, platform, flavor});
			return ((CodeCoverageStatus) (results[0]));
		}

		/// <remarks/>
		public void GetCodeCoverageStatusForBuildAsync(string buildUri, string platform, string flavor)
		{
			GetCodeCoverageStatusForBuildAsync(buildUri, platform, flavor, null);
		}

		/// <remarks/>
		public void GetCodeCoverageStatusForBuildAsync(string buildUri, string platform, string flavor, object userState)
		{
			if ((GetCodeCoverageStatusForBuildOperationCompleted == null))
			{
				GetCodeCoverageStatusForBuildOperationCompleted =
					new SendOrPostCallback(OnGetCodeCoverageStatusForBuildOperationCompleted);
			}
			InvokeAsync("GetCodeCoverageStatusForBuild", new object[] {buildUri, platform, flavor},
			            GetCodeCoverageStatusForBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetCodeCoverageStatusForBuildCompletedEventHandler GetCodeCoverageStatusForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetCompila" + "tionSummaryForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public CompilationSummaryData GetCompilationSummaryForBuild(string buildUri, string platform, string flavor)
		{
			object[] results = Invoke("GetCompilationSummaryForBuild", new object[] {buildUri, platform, flavor});
			return ((CompilationSummaryData) (results[0]));
		}

		/// <remarks/>
		public void GetCompilationSummaryForBuildAsync(string buildUri, string platform, string flavor)
		{
			GetCompilationSummaryForBuildAsync(buildUri, platform, flavor, null);
		}

		/// <remarks/>
		public void GetCompilationSummaryForBuildAsync(string buildUri, string platform, string flavor, object userState)
		{
			if ((GetCompilationSummaryForBuildOperationCompleted == null))
			{
				GetCompilationSummaryForBuildOperationCompleted =
					new SendOrPostCallback(OnGetCompilationSummaryForBuildOperationCompleted);
			}
			InvokeAsync("GetCompilationSummaryForBuild", new object[] {buildUri, platform, flavor},
			            GetCompilationSummaryForBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetCompilationSummaryForBuildCompletedEventHandler GetCompilationSummaryForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetListOfB" + "uilds",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public BuildData[] GetListOfBuilds(string teamProject, string buildType)
		{
			object[] results = Invoke("GetListOfBuilds", new object[] {teamProject, buildType});
			return ((BuildData[]) (results[0]));
		}

		/// <remarks/>
		public void GetListOfBuildsAsync(string teamProject, string buildType)
		{
			GetListOfBuildsAsync(teamProject, buildType, null);
		}

		/// <remarks/>
		public void GetListOfBuildsAsync(string teamProject, string buildType, object userState)
		{
			if ((GetListOfBuildsOperationCompleted == null))
			{
				GetListOfBuildsOperationCompleted = new SendOrPostCallback(OnGetListOfBuildsOperationCompleted);
			}
			InvokeAsync("GetListOfBuilds", new object[] {teamProject, buildType}, GetListOfBuildsOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetListOfBuildsCompletedEventHandler GetListOfBuildsCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetOpenedW" + "orkItemsForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public WorkItemData[] GetOpenedWorkItemsForBuild(string buildUri)
		{
			object[] results = Invoke("GetOpenedWorkItemsForBuild", new object[] {buildUri});
			return ((WorkItemData[]) (results[0]));
		}

		/// <remarks/>
		public void GetOpenedWorkItemsForBuildAsync(string buildUri)
		{
			GetOpenedWorkItemsForBuildAsync(buildUri, null);
		}

		/// <remarks/>
		public void GetOpenedWorkItemsForBuildAsync(string buildUri, object userState)
		{
			if ((GetOpenedWorkItemsForBuildOperationCompleted == null))
			{
				GetOpenedWorkItemsForBuildOperationCompleted = new SendOrPostCallback(OnGetOpenedWorkItemsForBuildOperationCompleted);
			}
			InvokeAsync("GetOpenedWorkItemsForBuild", new object[] {buildUri}, GetOpenedWorkItemsForBuildOperationCompleted,
			            userState);
		}

		/// <remarks/>
		public event GetOpenedWorkItemsForBuildCompletedEventHandler GetOpenedWorkItemsForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetPlatfor" + "mFlavorsForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public PlatformFlavorData[] GetPlatformFlavorsForBuild(string buildUri)
		{
			object[] results = Invoke("GetPlatformFlavorsForBuild", new object[] {buildUri});
			return ((PlatformFlavorData[]) (results[0]));
		}

		/// <remarks/>
		public void GetPlatformFlavorsForBuildAsync(string buildUri)
		{
			GetPlatformFlavorsForBuildAsync(buildUri, null);
		}

		/// <remarks/>
		public void GetPlatformFlavorsForBuildAsync(string buildUri, object userState)
		{
			if ((GetPlatformFlavorsForBuildOperationCompleted == null))
			{
				GetPlatformFlavorsForBuildOperationCompleted = new SendOrPostCallback(OnGetPlatformFlavorsForBuildOperationCompleted);
			}
			InvokeAsync("GetPlatformFlavorsForBuild", new object[] {buildUri}, GetPlatformFlavorsForBuildOperationCompleted,
			            userState);
		}

		/// <remarks/>
		public event GetPlatformFlavorsForBuildCompletedEventHandler GetPlatformFlavorsForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetTestRes" + "ultsForBuild",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public TestResultData[] GetTestResultsForBuild(string buildUri, string platform, string flavor)
		{
			object[] results = Invoke("GetTestResultsForBuild", new object[] {buildUri, platform, flavor});
			return ((TestResultData[]) (results[0]));
		}

		/// <remarks/>
		public void GetTestResultsForBuildAsync(string buildUri, string platform, string flavor)
		{
			GetTestResultsForBuildAsync(buildUri, platform, flavor, null);
		}

		/// <remarks/>
		public void GetTestResultsForBuildAsync(string buildUri, string platform, string flavor, object userState)
		{
			if ((GetTestResultsForBuildOperationCompleted == null))
			{
				GetTestResultsForBuildOperationCompleted = new SendOrPostCallback(OnGetTestResultsForBuildOperationCompleted);
			}
			InvokeAsync("GetTestResultsForBuild", new object[] {buildUri, platform, flavor},
			            GetTestResultsForBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetTestResultsForBuildCompletedEventHandler GetTestResultsForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/GetWorkIte" + "msForBuild"
			, RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public WorkItemData[] GetWorkItemsForBuild(string buildUri)
		{
			object[] results = Invoke("GetWorkItemsForBuild", new object[] {buildUri});
			return ((WorkItemData[]) (results[0]));
		}

		/// <remarks/>
		public void GetWorkItemsForBuildAsync(string buildUri)
		{
			GetWorkItemsForBuildAsync(buildUri, null);
		}

		/// <remarks/>
		public void GetWorkItemsForBuildAsync(string buildUri, object userState)
		{
			if ((GetWorkItemsForBuildOperationCompleted == null))
			{
				GetWorkItemsForBuildOperationCompleted = new SendOrPostCallback(OnGetWorkItemsForBuildOperationCompleted);
			}
			InvokeAsync("GetWorkItemsForBuild", new object[] {buildUri}, GetWorkItemsForBuildOperationCompleted, userState);
		}

		/// <remarks/>
		public event GetWorkItemsForBuildCompletedEventHandler GetWorkItemsForBuildCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/UpdateBuil" + "dFinishTime",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void UpdateBuildFinishTime(string buildUri, DateTime finishTime)
		{
			Invoke("UpdateBuildFinishTime", new object[] {buildUri, finishTime});
		}

		/// <remarks/>
		public void UpdateBuildFinishTimeAsync(string buildUri, DateTime finishTime)
		{
			UpdateBuildFinishTimeAsync(buildUri, finishTime, null);
		}

		/// <remarks/>
		public void UpdateBuildFinishTimeAsync(string buildUri, DateTime finishTime, object userState)
		{
			if ((UpdateBuildFinishTimeOperationCompleted == null))
			{
				UpdateBuildFinishTimeOperationCompleted = new SendOrPostCallback(OnUpdateBuildFinishTimeOperationCompleted);
			}
			InvokeAsync("UpdateBuildFinishTime", new object[] {buildUri, finishTime}, UpdateBuildFinishTimeOperationCompleted,
			            userState);
		}

		/// <remarks/>
		public event UpdateBuildFinishTimeCompletedEventHandler UpdateBuildFinishTimeCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/UpdateBuil" + "dFlag",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void UpdateBuildFlag(string buildUri, bool isGoodBuild)
		{
			Invoke("UpdateBuildFlag", new object[] {buildUri, isGoodBuild});
		}

		/// <remarks/>
		public void UpdateBuildFlagAsync(string buildUri, bool isGoodBuild)
		{
			UpdateBuildFlagAsync(buildUri, isGoodBuild, null);
		}

		/// <remarks/>
		public void UpdateBuildFlagAsync(string buildUri, bool isGoodBuild, object userState)
		{
			if ((UpdateBuildFlagOperationCompleted == null))
			{
				UpdateBuildFlagOperationCompleted = new SendOrPostCallback(OnUpdateBuildFlagOperationCompleted);
			}
			InvokeAsync("UpdateBuildFlag", new object[] {buildUri, isGoodBuild}, UpdateBuildFlagOperationCompleted, userState);
		}

		/// <remarks/>
		public event UpdateBuildFlagCompletedEventHandler UpdateBuildFlagCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/UpdateBuil" + "dLogLocation",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void UpdateBuildLogLocation(string buildUri, string logLocation)
		{
			Invoke("UpdateBuildLogLocation", new object[] {buildUri, logLocation});
		}

		/// <remarks/>
		public void UpdateBuildLogLocationAsync(string buildUri, string logLocation)
		{
			UpdateBuildLogLocationAsync(buildUri, logLocation, null);
		}

		/// <remarks/>
		public void UpdateBuildLogLocationAsync(string buildUri, string logLocation, object userState)
		{
			if ((UpdateBuildLogLocationOperationCompleted == null))
			{
				UpdateBuildLogLocationOperationCompleted = new SendOrPostCallback(OnUpdateBuildLogLocationOperationCompleted);
			}
			InvokeAsync("UpdateBuildLogLocation", new object[] {buildUri, logLocation}, UpdateBuildLogLocationOperationCompleted,
			            userState);
		}

		/// <remarks/>
		public event UpdateBuildLogLocationCompletedEventHandler UpdateBuildLogLocationCompleted;

		/// <remarks/>
		[SoapDocumentMethod(
			"http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/UpdateBuil" + "dNumberAndDropLocation",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void UpdateBuildNumberAndDropLocation(string buildUri, string buildNumber, string dropLocation)
		{
			Invoke("UpdateBuildNumberAndDropLocation", new object[] {buildUri, buildNumber, dropLocation});
		}

		/// <remarks/>
		public void UpdateBuildNumberAndDropLocationAsync(string buildUri, string buildNumber, string dropLocation)
		{
			UpdateBuildNumberAndDropLocationAsync(buildUri, buildNumber, dropLocation, null);
		}

		/// <remarks/>
		public void UpdateBuildNumberAndDropLocationAsync(string buildUri, string buildNumber, string dropLocation,
		                                                  object userState)
		{
			if ((UpdateBuildNumberAndDropLocationOperationCompleted == null))
			{
				UpdateBuildNumberAndDropLocationOperationCompleted =
					new SendOrPostCallback(OnUpdateBuildNumberAndDropLocationOperationCompleted);
			}
			InvokeAsync("UpdateBuildNumberAndDropLocation", new object[] {buildUri, buildNumber, dropLocation},
			            UpdateBuildNumberAndDropLocationOperationCompleted, userState);
		}

		/// <remarks/>
		public event UpdateBuildNumberAndDropLocationCompletedEventHandler UpdateBuildNumberAndDropLocationCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/UpdateBuil" + "dQuality",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void UpdateBuildQuality(string buildUri, string buildQuality)
		{
			Invoke("UpdateBuildQuality", new object[] {buildUri, buildQuality});
		}

		/// <remarks/>
		public void UpdateBuildQualityAsync(string buildUri, string buildQuality)
		{
			UpdateBuildQualityAsync(buildUri, buildQuality, null);
		}

		/// <remarks/>
		public void UpdateBuildQualityAsync(string buildUri, string buildQuality, object userState)
		{
			if ((UpdateBuildQualityOperationCompleted == null))
			{
				UpdateBuildQualityOperationCompleted = new SendOrPostCallback(OnUpdateBuildQualityOperationCompleted);
			}
			InvokeAsync("UpdateBuildQuality", new object[] {buildUri, buildQuality}, UpdateBuildQualityOperationCompleted,
			            userState);
		}

		/// <remarks/>
		public event UpdateBuildQualityCompletedEventHandler UpdateBuildQualityCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/UpdateBuil" + "dStatus",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void UpdateBuildStatus(string buildUri, string buildStatus)
		{
			Invoke("UpdateBuildStatus", new object[] {buildUri, buildStatus});
		}

		/// <remarks/>
		public void UpdateBuildStatusAsync(string buildUri, string buildStatus)
		{
			UpdateBuildStatusAsync(buildUri, buildStatus, null);
		}

		/// <remarks/>
		public void UpdateBuildStatusAsync(string buildUri, string buildStatus, object userState)
		{
			if ((UpdateBuildStatusOperationCompleted == null))
			{
				UpdateBuildStatusOperationCompleted = new SendOrPostCallback(OnUpdateBuildStatusOperationCompleted);
			}
			InvokeAsync("UpdateBuildStatus", new object[] {buildUri, buildStatus}, UpdateBuildStatusOperationCompleted, userState);
		}

		/// <remarks/>
		public event UpdateBuildStatusCompletedEventHandler UpdateBuildStatusCompleted;

		/// <remarks/>
		[SoapDocumentMethod("http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03/UpdateBuil" + "dStep",
			RequestNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			ResponseNamespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03",
			Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
		public void UpdateBuildStep(string buildUri, string buildStepName, DateTime finishTime, BuildStepStatus status)
		{
			Invoke("UpdateBuildStep", new object[] {buildUri, buildStepName, finishTime, status});
		}

		/// <remarks/>
		public void UpdateBuildStepAsync(string buildUri, string buildStepName, DateTime finishTime, BuildStepStatus status)
		{
			UpdateBuildStepAsync(buildUri, buildStepName, finishTime, status, null);
		}

		/// <remarks/>
		public void UpdateBuildStepAsync(string buildUri, string buildStepName, DateTime finishTime, BuildStepStatus status,
		                                 object userState)
		{
			if ((UpdateBuildStepOperationCompleted == null))
			{
				UpdateBuildStepOperationCompleted = new SendOrPostCallback(OnUpdateBuildStepOperationCompleted);
			}
			InvokeAsync("UpdateBuildStep", new object[] {buildUri, buildStepName, finishTime, status},
			            UpdateBuildStepOperationCompleted, userState);
		}

		/// <remarks/>
		public event UpdateBuildStepCompletedEventHandler UpdateBuildStepCompleted;

		private bool IsLocalFileSystemWebService(string url)
		{
			if (((url == null) || (url == string.Empty)))
			{
				return false;
			}
			Uri wsUri = new Uri(url);
			if (((wsUri.Port >= 1024) && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
			{
				return true;
			}
			return false;
		}

		private void OnAddBuildOperationCompleted(object arg)
		{
			if ((AddBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				AddBuildCompleted(this,
				                  new AddBuildCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
				                                                 invokeArgs.UserState));
			}
		}

		private void OnAddBuildStepOperationCompleted(object arg)
		{
			if ((AddBuildStepCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				AddBuildStepCompleted(this,
				                      new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		private void OnAddChangeSetsForBuildOperationCompleted(object arg)
		{
			if ((AddChangeSetsForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				AddChangeSetsForBuildCompleted(this,
				                               new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
				                                                           invokeArgs.UserState));
			}
		}

		private void OnAddOpenedWorkItemsForBuildOperationCompleted(object arg)
		{
			if ((AddOpenedWorkItemsForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				AddOpenedWorkItemsForBuildCompleted(this,
				                                    new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
				                                                                invokeArgs.UserState));
			}
		}

		private void OnAddPlatformFlavorLogForBuildOperationCompleted(object arg)
		{
			if ((AddPlatformFlavorLogForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				AddPlatformFlavorLogForBuildCompleted(this,
				                                      new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
				                                                                  invokeArgs.UserState));
			}
		}

		private void OnAddProjectDetailsForBuildOperationCompleted(object arg)
		{
			if ((AddProjectDetailsForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				AddProjectDetailsForBuildCompleted(this,
				                                   new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
				                                                               invokeArgs.UserState));
			}
		}

		private void OnAddWorkItemsForBuildOperationCompleted(object arg)
		{
			if ((AddWorkItemsForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				AddWorkItemsForBuildCompleted(this,
				                              new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
				                                                          invokeArgs.UserState));
			}
		}

		private void OnGetBuildDetailsOperationCompleted(object arg)
		{
			if ((GetBuildDetailsCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetBuildDetailsCompleted(this,
				                         new GetBuildDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
				                                                               invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		private void OnGetBuildQualitiesOperationCompleted(object arg)
		{
			if ((GetBuildQualitiesCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetBuildQualitiesCompleted(this,
				                           new GetBuildQualitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
				                                                                   invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		private void OnGetBuildStepsOperationCompleted(object arg)
		{
			if ((GetBuildStepsCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetBuildStepsCompleted(this,
				                       new GetBuildStepsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
				                                                           invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		private void OnGetBuildUriOperationCompleted(object arg)
		{
			if ((GetBuildUriCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetBuildUriCompleted(this,
				                     new GetBuildUriCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
				                                                       invokeArgs.UserState));
			}
		}

		private void OnGetChangeSetsForBuildOperationCompleted(object arg)
		{
			if ((GetChangeSetsForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetChangeSetsForBuildCompleted(this,
				                               new GetChangeSetsForBuildCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
				                                                                           invokeArgs.Cancelled,
				                                                                           invokeArgs.UserState));
			}
		}

		private void OnGetCodeCoverageForBuildOperationCompleted(object arg)
		{
			if ((GetCodeCoverageForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetCodeCoverageForBuildCompleted(this,
				                                 new GetCodeCoverageForBuildCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
				                                                                               invokeArgs.Cancelled,
				                                                                               invokeArgs.UserState));
			}
		}

		private void OnGetCodeCoverageStatusForBuildOperationCompleted(object arg)
		{
			if ((GetCodeCoverageStatusForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetCodeCoverageStatusForBuildCompleted(this,
				                                       new GetCodeCoverageStatusForBuildCompletedEventArgs(invokeArgs.Results,
				                                                                                           invokeArgs.Error,
				                                                                                           invokeArgs.Cancelled,
				                                                                                           invokeArgs.UserState));
			}
		}

		private void OnGetCompilationSummaryForBuildOperationCompleted(object arg)
		{
			if ((GetCompilationSummaryForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetCompilationSummaryForBuildCompleted(this,
				                                       new GetCompilationSummaryForBuildCompletedEventArgs(invokeArgs.Results,
				                                                                                           invokeArgs.Error,
				                                                                                           invokeArgs.Cancelled,
				                                                                                           invokeArgs.UserState));
			}
		}

		private void OnGetListOfBuildsOperationCompleted(object arg)
		{
			if ((GetListOfBuildsCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetListOfBuildsCompleted(this,
				                         new GetListOfBuildsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
				                                                               invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		private void OnGetOpenedWorkItemsForBuildOperationCompleted(object arg)
		{
			if ((GetOpenedWorkItemsForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetOpenedWorkItemsForBuildCompleted(this,
				                                    new GetOpenedWorkItemsForBuildCompletedEventArgs(invokeArgs.Results,
				                                                                                     invokeArgs.Error,
				                                                                                     invokeArgs.Cancelled,
				                                                                                     invokeArgs.UserState));
			}
		}

		private void OnGetPlatformFlavorsForBuildOperationCompleted(object arg)
		{
			if ((GetPlatformFlavorsForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetPlatformFlavorsForBuildCompleted(this,
				                                    new GetPlatformFlavorsForBuildCompletedEventArgs(invokeArgs.Results,
				                                                                                     invokeArgs.Error,
				                                                                                     invokeArgs.Cancelled,
				                                                                                     invokeArgs.UserState));
			}
		}

		private void OnGetTestResultsForBuildOperationCompleted(object arg)
		{
			if ((GetTestResultsForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetTestResultsForBuildCompleted(this,
				                                new GetTestResultsForBuildCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
				                                                                             invokeArgs.Cancelled,
				                                                                             invokeArgs.UserState));
			}
		}

		private void OnGetWorkItemsForBuildOperationCompleted(object arg)
		{
			if ((GetWorkItemsForBuildCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				GetWorkItemsForBuildCompleted(this,
				                              new GetWorkItemsForBuildCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
				                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		private void OnUpdateBuildFinishTimeOperationCompleted(object arg)
		{
			if ((UpdateBuildFinishTimeCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				UpdateBuildFinishTimeCompleted(this,
				                               new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
				                                                           invokeArgs.UserState));
			}
		}

		private void OnUpdateBuildFlagOperationCompleted(object arg)
		{
			if ((UpdateBuildFlagCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				UpdateBuildFlagCompleted(this,
				                         new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		private void OnUpdateBuildLogLocationOperationCompleted(object arg)
		{
			if ((UpdateBuildLogLocationCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				UpdateBuildLogLocationCompleted(this,
				                                new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
				                                                            invokeArgs.UserState));
			}
		}

		private void OnUpdateBuildNumberAndDropLocationOperationCompleted(object arg)
		{
			if ((UpdateBuildNumberAndDropLocationCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				UpdateBuildNumberAndDropLocationCompleted(this,
				                                          new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
				                                                                      invokeArgs.UserState));
			}
		}

		private void OnUpdateBuildQualityOperationCompleted(object arg)
		{
			if ((UpdateBuildQualityCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				UpdateBuildQualityCompleted(this,
				                            new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		private void OnUpdateBuildStatusOperationCompleted(object arg)
		{
			if ((UpdateBuildStatusCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				UpdateBuildStatusCompleted(this,
				                           new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		private void OnUpdateBuildStepOperationCompleted(object arg)
		{
			if ((UpdateBuildStepCompleted != null))
			{
				InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
				UpdateBuildStepCompleted(this,
				                         new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class BuildData
	{
		private string buildMachineField;

		private string buildNumberField;

		private string buildQualityField;
		private string buildStatusField;
		private int buildStatusIdField;
		private string buildTypeField;
		private string buildTypeFileUriField;

		private string buildUriField;
		private string dropLocationField;

		private DateTime finishTimeField;

		private string lastChangedByField;

		private DateTime lastChangedOnField;
		private string logLocationField;
		private string requestedByField;
		private DateTime startTimeField;
		private string teamProjectField;

		/// <remarks/>
		public string BuildTypeFileUri
		{
			get { return buildTypeFileUriField; }
			set { buildTypeFileUriField = value; }
		}

		/// <remarks/>
		public string BuildMachine
		{
			get { return buildMachineField; }
			set { buildMachineField = value; }
		}

		/// <remarks/>
		public string DropLocation
		{
			get { return dropLocationField; }
			set { dropLocationField = value; }
		}

		/// <remarks/>
		public string BuildStatus
		{
			get { return buildStatusField; }
			set { buildStatusField = value; }
		}

		/// <remarks/>
		public DateTime StartTime
		{
			get { return startTimeField; }
			set { startTimeField = value; }
		}

		/// <remarks/>
		public string BuildType
		{
			get { return buildTypeField; }
			set { buildTypeField = value; }
		}

		/// <remarks/>
		public string RequestedBy
		{
			get { return requestedByField; }
			set { requestedByField = value; }
		}

		/// <remarks/>
		public string TeamProject
		{
			get { return teamProjectField; }
			set { teamProjectField = value; }
		}

		/// <remarks/>
		public string BuildNumber
		{
			get { return buildNumberField; }
			set { buildNumberField = value; }
		}

		/// <remarks/>
		public string BuildQuality
		{
			get { return buildQualityField; }
			set { buildQualityField = value; }
		}

		/// <remarks/>
		public string BuildUri
		{
			get { return buildUriField; }
			set { buildUriField = value; }
		}

		/// <remarks/>
		public DateTime FinishTime
		{
			get { return finishTimeField; }
			set { finishTimeField = value; }
		}

		/// <remarks/>
		public string LogLocation
		{
			get { return logLocationField; }
			set { logLocationField = value; }
		}

		/// <remarks/>
		public string LastChangedBy
		{
			get { return lastChangedByField; }
			set { lastChangedByField = value; }
		}

		/// <remarks/>
		public DateTime LastChangedOn
		{
			get { return lastChangedOnField; }
			set { lastChangedOnField = value; }
		}

		/// <remarks/>
		public int BuildStatusId
		{
			get { return buildStatusIdField; }
			set { buildStatusIdField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class CompilationSummaryData
	{
		private string logFileNameField;

		private long totalCodeAnalysisErrorsField;

		private long totalCodeAnalysisWarningsField;
		private long totalCompilerErrorsField;

		private long totalCompilerWarningsField;

		/// <remarks/>
		public string LogFileName
		{
			get { return logFileNameField; }
			set { logFileNameField = value; }
		}

		/// <remarks/>
		public long TotalCompilerErrors
		{
			get { return totalCompilerErrorsField; }
			set { totalCompilerErrorsField = value; }
		}

		/// <remarks/>
		public long TotalCompilerWarnings
		{
			get { return totalCompilerWarningsField; }
			set { totalCompilerWarningsField = value; }
		}

		/// <remarks/>
		public long TotalCodeAnalysisErrors
		{
			get { return totalCodeAnalysisErrorsField; }
			set { totalCodeAnalysisErrorsField = value; }
		}

		/// <remarks/>
		public long TotalCodeAnalysisWarnings
		{
			get { return totalCodeAnalysisWarningsField; }
			set { totalCodeAnalysisWarningsField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class ProjectData
	{
		private int codeAnalysisErrorsField;

		private int codeAnalysisWarningsField;
		private int compileErrorsField;

		private int compileWarningsField;
		private string flavourNameField;
		private string parentProjectFileField;

		private string platformNameField;
		private string projectFileField;

		/// <remarks/>
		public string ProjectFile
		{
			get { return projectFileField; }
			set { projectFileField = value; }
		}

		/// <remarks/>
		public string ParentProjectFile
		{
			get { return parentProjectFileField; }
			set { parentProjectFileField = value; }
		}

		/// <remarks/>
		public string PlatformName
		{
			get { return platformNameField; }
			set { platformNameField = value; }
		}

		/// <remarks/>
		public string FlavourName
		{
			get { return flavourNameField; }
			set { flavourNameField = value; }
		}

		/// <remarks/>
		public int CompileErrors
		{
			get { return compileErrorsField; }
			set { compileErrorsField = value; }
		}

		/// <remarks/>
		public int CompileWarnings
		{
			get { return compileWarningsField; }
			set { compileWarningsField = value; }
		}

		/// <remarks/>
		public int CodeAnalysisErrors
		{
			get { return codeAnalysisErrorsField; }
			set { codeAnalysisErrorsField = value; }
		}

		/// <remarks/>
		public int CodeAnalysisWarnings
		{
			get { return codeAnalysisWarningsField; }
			set { codeAnalysisWarningsField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class BuildStepData
	{
		private string buildStepMessageField;
		private string buildStepNameField;

		private DateTime finishTimeField;

		private BuildStepStatus statusField;

		/// <remarks/>
		public string BuildStepName
		{
			get { return buildStepNameField; }
			set { buildStepNameField = value; }
		}

		/// <remarks/>
		public string BuildStepMessage
		{
			get { return buildStepMessageField; }
			set { buildStepMessageField = value; }
		}

		/// <remarks/>
		public DateTime FinishTime
		{
			get { return finishTimeField; }
			set { finishTimeField = value; }
		}

		/// <remarks/>
		public BuildStepStatus Status
		{
			get { return statusField; }
			set { statusField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public enum BuildStepStatus
	{
		/// <remarks/>
		InProgress,

		/// <remarks/>
		Failed,

		/// <remarks/>
		Succeeded,
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class CodeCoverageStatus
	{
		private string errorLogFileField;
		private bool isBuildCoverageProcessingField;

		/// <remarks/>
		public bool IsBuildCoverageProcessing
		{
			get { return isBuildCoverageProcessingField; }
			set { isBuildCoverageProcessingField = value; }
		}

		/// <remarks/>
		public string ErrorLogFile
		{
			get { return errorLogFileField; }
			set { errorLogFileField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class CodeCoverageData
	{
		private int blocksCoveredField;

		private int blocksNotCoveredField;

		private bool isBuildCoverageProcessingField;
		private int linesCoveredField;

		private int linesNotCoveredField;

		private int linesPartiallyCoveredField;
		private string nameField;
		private string runIdField;
		private string runUserField;

		/// <remarks/>
		public string RunId
		{
			get { return runIdField; }
			set { runIdField = value; }
		}

		/// <remarks/>
		public string Name
		{
			get { return nameField; }
			set { nameField = value; }
		}

		/// <remarks/>
		public string RunUser
		{
			get { return runUserField; }
			set { runUserField = value; }
		}

		/// <remarks/>
		public int LinesCovered
		{
			get { return linesCoveredField; }
			set { linesCoveredField = value; }
		}

		/// <remarks/>
		public int LinesNotCovered
		{
			get { return linesNotCoveredField; }
			set { linesNotCoveredField = value; }
		}

		/// <remarks/>
		public int LinesPartiallyCovered
		{
			get { return linesPartiallyCoveredField; }
			set { linesPartiallyCoveredField = value; }
		}

		/// <remarks/>
		public int BlocksCovered
		{
			get { return blocksCoveredField; }
			set { blocksCoveredField = value; }
		}

		/// <remarks/>
		public int BlocksNotCovered
		{
			get { return blocksNotCoveredField; }
			set { blocksNotCoveredField = value; }
		}

		/// <remarks/>
		public bool IsBuildCoverageProcessing
		{
			get { return isBuildCoverageProcessingField; }
			set { isBuildCoverageProcessingField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class TestResultData
	{
		private string nameField;
		private string runIdField;
		private bool runPassedField;

		private string runUserField;

		private int testsFailedField;
		private int testsPassedField;
		private int testsTotalField;

		/// <remarks/>
		public string RunId
		{
			get { return runIdField; }
			set { runIdField = value; }
		}

		/// <remarks/>
		public string Name
		{
			get { return nameField; }
			set { nameField = value; }
		}

		/// <remarks/>
		public string RunUser
		{
			get { return runUserField; }
			set { runUserField = value; }
		}

		/// <remarks/>
		public int TestsTotal
		{
			get { return testsTotalField; }
			set { testsTotalField = value; }
		}

		/// <remarks/>
		public int TestsPassed
		{
			get { return testsPassedField; }
			set { testsPassedField = value; }
		}

		/// <remarks/>
		public int TestsFailed
		{
			get { return testsFailedField; }
			set { testsFailedField = value; }
		}

		/// <remarks/>
		public bool RunPassed
		{
			get { return runPassedField; }
			set { runPassedField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class WorkItemData
	{
		private string assignedToField;
		private string statusField;
		private string titleField;
		private int workItemIdField;

		private string workItemUriField;

		/// <remarks/>
		public int WorkItemId
		{
			get { return workItemIdField; }
			set { workItemIdField = value; }
		}

		/// <remarks/>
		public string WorkItemUri
		{
			get { return workItemUriField; }
			set { workItemUriField = value; }
		}

		/// <remarks/>
		public string Title
		{
			get { return titleField; }
			set { titleField = value; }
		}

		/// <remarks/>
		public string Status
		{
			get { return statusField; }
			set { statusField = value; }
		}

		/// <remarks/>
		public string AssignedTo
		{
			get { return assignedToField; }
			set { assignedToField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class ChangeSetData
	{
		private int changeSetIdField;

		private string changeSetUriField;

		private string checkedInByField;
		private string commentField;

		/// <remarks/>
		public int ChangeSetId
		{
			get { return changeSetIdField; }
			set { changeSetIdField = value; }
		}

		/// <remarks/>
		public string Comment
		{
			get { return commentField; }
			set { commentField = value; }
		}

		/// <remarks/>
		public string ChangeSetUri
		{
			get { return changeSetUriField; }
			set { changeSetUriField = value; }
		}

		/// <remarks/>
		public string CheckedInBy
		{
			get { return checkedInByField; }
			set { checkedInByField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Xml", "2.0.50727.42")]
	[Serializable]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	[XmlType(Namespace = "http://schemas.microsoft.com/TeamFoundation/2005/06/Build/BuildInfo/03")]
	public class PlatformFlavorData
	{
		private string flavorNameField;
		private string platformNameField;

		/// <remarks/>
		public string PlatformName
		{
			get { return platformNameField; }
			set { platformNameField = value; }
		}

		/// <remarks/>
		public string FlavorName
		{
			get { return flavorNameField; }
			set { flavorNameField = value; }
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetBuildUriCompletedEventHandler(object sender, GetBuildUriCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetBuildUriCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetBuildUriCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
			: base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public string Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((string) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetListOfBuildsCompletedEventHandler(object sender, GetListOfBuildsCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetListOfBuildsCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetListOfBuildsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
			: base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public BuildData[] Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((BuildData[]) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetBuildDetailsCompletedEventHandler(object sender, GetBuildDetailsCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetBuildDetailsCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetBuildDetailsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
			: base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public BuildData Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((BuildData) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetBuildQualitiesCompletedEventHandler(object sender, GetBuildQualitiesCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetBuildQualitiesCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetBuildQualitiesCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
			: base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public string[] Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((string[]) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetPlatformFlavorsForBuildCompletedEventHandler(
		object sender, GetPlatformFlavorsForBuildCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetPlatformFlavorsForBuildCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetPlatformFlavorsForBuildCompletedEventArgs(object[] results, Exception exception, bool cancelled,
		                                                      object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public PlatformFlavorData[] Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((PlatformFlavorData[]) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetChangeSetsForBuildCompletedEventHandler(
		object sender, GetChangeSetsForBuildCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetChangeSetsForBuildCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetChangeSetsForBuildCompletedEventArgs(object[] results, Exception exception, bool cancelled,
		                                                 object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ChangeSetData[] Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((ChangeSetData[]) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetWorkItemsForBuildCompletedEventHandler(object sender, GetWorkItemsForBuildCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetWorkItemsForBuildCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetWorkItemsForBuildCompletedEventArgs(object[] results, Exception exception, bool cancelled,
		                                                object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public WorkItemData[] Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((WorkItemData[]) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetOpenedWorkItemsForBuildCompletedEventHandler(
		object sender, GetOpenedWorkItemsForBuildCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetOpenedWorkItemsForBuildCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetOpenedWorkItemsForBuildCompletedEventArgs(object[] results, Exception exception, bool cancelled,
		                                                      object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public WorkItemData[] Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((WorkItemData[]) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetTestResultsForBuildCompletedEventHandler(
		object sender, GetTestResultsForBuildCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetTestResultsForBuildCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetTestResultsForBuildCompletedEventArgs(object[] results, Exception exception, bool cancelled,
		                                                  object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public TestResultData[] Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((TestResultData[]) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetCodeCoverageForBuildCompletedEventHandler(
		object sender, GetCodeCoverageForBuildCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetCodeCoverageForBuildCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetCodeCoverageForBuildCompletedEventArgs(object[] results, Exception exception, bool cancelled,
		                                                   object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public CodeCoverageData[] Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((CodeCoverageData[]) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetCodeCoverageStatusForBuildCompletedEventHandler(
		object sender, GetCodeCoverageStatusForBuildCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetCodeCoverageStatusForBuildCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetCodeCoverageStatusForBuildCompletedEventArgs(object[] results, Exception exception, bool cancelled,
		                                                         object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public CodeCoverageStatus Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((CodeCoverageStatus) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void UpdateBuildQualityCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetBuildStepsCompletedEventHandler(object sender, GetBuildStepsCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetBuildStepsCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetBuildStepsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
			: base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public BuildStepData[] Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((BuildStepData[]) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void AddBuildCompletedEventHandler(object sender, AddBuildCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class AddBuildCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal AddBuildCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
			: base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public string Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((string) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void AddChangeSetsForBuildCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void AddOpenedWorkItemsForBuildCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void AddWorkItemsForBuildCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void UpdateBuildNumberAndDropLocationCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void UpdateBuildFlagCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void UpdateBuildLogLocationCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void UpdateBuildFinishTimeCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void UpdateBuildStatusCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void AddProjectDetailsForBuildCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void AddBuildStepCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void UpdateBuildStepCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void GetCompilationSummaryForBuildCompletedEventHandler(
		object sender, GetCompilationSummaryForBuildCompletedEventArgs e);

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	[DebuggerStepThrough]
	[DesignerCategory("code")]
	public class GetCompilationSummaryForBuildCompletedEventArgs : AsyncCompletedEventArgs
	{
		private readonly object[] results;

		internal GetCompilationSummaryForBuildCompletedEventArgs(object[] results, Exception exception, bool cancelled,
		                                                         object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public CompilationSummaryData Result
		{
			get
			{
				RaiseExceptionIfNecessary();
				return ((CompilationSummaryData) (results[0]));
			}
		}
	}

	/// <remarks/>
	[GeneratedCode("System.Web.Services", "2.0.50727.42")]
	public delegate void AddPlatformFlavorLogForBuildCompletedEventHandler(object sender, AsyncCompletedEventArgs e);
}

#pragma warning restore 1591